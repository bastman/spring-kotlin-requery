version '0.0.1'

buildscript {
    ext {
        kotlinVersion = '1.2.21'
        kotlinLoggingVersion = '1.5.3'
        logstashLogbackEncoderVersion='5.0'
        springBootVersion ='2.0.0.RELEASE'
        springGradlePluginVersion = '1.0.4.RELEASE'
        jacksonVersion = '2.9.4'
        swaggerVersion = '2.8.0'

        postgresDriverVersion = '42.2.1'
        //exposedVersion = '0.10.1'
        requeryVersion = '1.5.0'

        junitGradlePluginVersion = '1.1.0'
        mockitoVersion = '2.15.0'
        kluentVersion = '1.35'
        mockkVersion = '1.7.9'
    }

    dependencies {
        // kotlin
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion"
        // spring
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$springGradlePluginVersion"
        // postgres
        classpath "org.postgresql:postgresql:$postgresDriverVersion"
        // test
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junitGradlePluginVersion"
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: "kotlin-noarg"
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'kotlin-kapt'
apply plugin: 'idea'

idea {
    module {
        def kaptMain = file('build/generated/source/kapt/main')
        sourceDirs += kaptMain
        generatedSourceDirs += kaptMain
    }
}

kapt {
    generateStubs = true
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        apiVersion="1.2"
        languageVersion="1.2"
        freeCompilerArgs = ["-Xjsr305=strict"]
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        apiVersion="1.2"
        languageVersion="1.2"
        freeCompilerArgs = ["-Xjsr305=strict"]
    }
}


repositories {
    mavenCentral()
    jcenter()
    maven { setUrl("https://dl.bintray.com/kotlin/exposed") }
    maven { setUrl("https://dl.bintray.com/sdeleuze/maven/") }
}
dependencies {
    // kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    // logging
    compile "net.logstash.logback:logstash-logback-encoder:$logstashLogbackEncoderVersion"
    compile "io.github.microutils:kotlin-logging:$kotlinLoggingVersion"
    // spring
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"

    compile "org.springframework.boot:spring-boot-starter-jdbc"
    runtime "org.springframework.boot:spring-boot-devtools"

    // jackson json
    compile "com.fasterxml.jackson.module:jackson-modules-java8:$jacksonVersion"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    compile "com.fasterxml.jackson.module:jackson-module-parameter-names:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    // swagger
    compile "io.springfox:springfox-swagger2:$swaggerVersion"
    compile "io.springfox:springfox-swagger-ui:$swaggerVersion"

    // postgres
    compile "org.postgresql:postgresql:${postgresDriverVersion}"

    // exposed
    //compile "org.jetbrains.exposed:exposed:$exposedVersion"
    //compile "org.jetbrains.exposed:spring-transaction:$exposedVersion"

    // requery
    compile "io.requery:requery:$requeryVersion"
    compile "io.requery:requery-kotlin:$requeryVersion"
    kapt "io.requery:requery-processor:$requeryVersion"

    // test
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude module: "junit"
    }
    testCompile "org.junit.jupiter:junit-jupiter-api"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
    testCompile "org.amshove.kluent:kluent:$kluentVersion"
    testCompile "io.mockk:mockk:$mockkVersion"
}

test {
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}



